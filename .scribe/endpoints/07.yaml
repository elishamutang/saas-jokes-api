name: 'Jokes Management'
description: |-

  APIs for managing jokes.
endpoints:
  -
    httpMethods:
      - POST
    uri: 'api/jokes/trash/recover/{id}'
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Recover specified soft deleted joke from trash'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the recover.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/jokes/trash/remove/{id}'
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove specified soft deleted category from trash'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the remove.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/jokes/trash/recover-all
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Recover all soft deleted jokes from trash'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/jokes/trash/remove-all
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove all soft deleted jokes from trash'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/jokes/trash
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Show all soft deleted jokes'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"success":false,"message":"Please log into your account.","data":{"id":5,"title":"Java Divorce","content":"Why did the two Java methods get a divorce? Because they had constant arguments.","user_id":5,"created_at":"2025-10-09T06:29:09.000000Z","updated_at":"2025-10-09T06:29:09.000000Z","deleted_at":null}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/jokes
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of the jokes.'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      search:
        name: search
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters:
      search: architecto
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"success":false,"message":"Please log into your account.","data":{"id":8,"title":"Joke about pirates, maths, server","content":"New joke''s content","user_id":4,"created_at":"2025-10-09T06:33:50.000000Z","updated_at":"2025-10-09T06:33:50.000000Z","deleted_at":null}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/jokes
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created jokes in storage.'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'Must not be greater than 96 characters.'
        required: true
        example: b
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      content:
        name: content
        description: ''
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      categories:
        name: categories
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      reference:
        name: reference
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters:
      title: b
      content: architecto
      categories: architecto
      reference: architecto
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/jokes/{id}'
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified joke.'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the joke.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"success":false,"message":"Please log into your account.","data":{"id":4,"title":"LIGHTS","content":"How many programmers does it take to change a light bulb? None. That\u2019s a hardware problem.","user_id":6,"created_at":"2025-10-09T06:29:09.000000Z","updated_at":"2025-10-09T06:47:13.000000Z","deleted_at":null}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/jokes/{id}'
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the specified joke in storage.'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the joke.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'Must not be greater than 96 characters.'
        required: true
        example: b
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      content:
        name: content
        description: ''
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      title: b
      content: architecto
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/jokes/{id}'
    metadata:
      groupName: 'Jokes Management'
      groupDescription: |-

        APIs for managing jokes.
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified joke from storage.'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      X-Api-Key: '{YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the joke.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - X-Api-Key
      - 10|kcbmhxnlajUyAJYmTKbDrY3F3pUzfkCnk2LcFXgOccd91f58
    controller: null
    method: null
    route: null
    custom: []
